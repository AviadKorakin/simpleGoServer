{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server for managing employees.",
        "title": "WebMVCEmployees API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/employees": {
            "get": {
                "description": "Returns a paginated list of employees. When the \"criteria\" query parameter is provided,",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "List employees with filtering",
                "parameters": [
                    {
                        "enum": [
                            "byEmailDomain",
                            "byRole",
                            "byAge"
                        ],
                        "type": "string",
                        "default": "",
                        "description": "Filter criteria. Allowed values: byEmailDomain,byRole,byAge. If set to 'none' or omitted, all employees are returned",
                        "name": "criteria",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EmployeeResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Accepts employee details in JSON, validates and stores the employee.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Create a new employee",
                "parameters": [
                    {
                        "description": "Employee details",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes all employee records from the service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Delete all employees",
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employees/{employeeEmail}": {
            "get": {
                "description": "Returns employee details if the provided email and password match a record.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Get an employee by email and password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee email",
                        "name": "employeeEmail",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeResponse"
                        }
                    }
                }
            }
        },
        "/employees/{employeeEmail}/manager": {
            "get": {
                "description": "Returns the manager details (excluding password) for the specified employee.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Get manager of an employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee email",
                        "name": "employeeEmail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Associates an employee with a manager using ManagerEmailBoundary JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Set manager for an employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee email",
                        "name": "employeeEmail",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Manager email",
                        "name": "manager",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ManagerEmailBoundary"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Unsets the manager for the specified employee.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Remove manager association from an employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee email",
                        "name": "employeeEmail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/managers/{managerEmail}/subordinates": {
            "get": {
                "description": "Returns a paginated list of employees managed by the specified manager.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Get subordinates for a manager",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manager email",
                        "name": "managerEmail",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EmployeeResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Birthdate": {
            "type": "object",
            "properties": {
                "day": {
                    "description": "Day represents the two-digit day.",
                    "type": "string",
                    "example": "03"
                },
                "month": {
                    "description": "Month represents the two-digit month.",
                    "type": "string",
                    "example": "01"
                },
                "year": {
                    "description": "Year represents the four-digit year.",
                    "type": "string",
                    "example": "1999"
                }
            }
        },
        "models.Employee": {
            "description": "An employee with email, name, password, birthdate, and roles.",
            "type": "object",
            "properties": {
                "birthdate": {
                    "description": "Birthdate contains the employee's date of birth.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Birthdate"
                        }
                    ]
                },
                "email": {
                    "description": "Email is the unique identifier.",
                    "type": "string",
                    "example": "janesmith@s.afeka.ac.il"
                },
                "manager": {
                    "description": "Manager optionally stores the email of the employee's manager.",
                    "type": "string",
                    "example": "manager@s.example.com"
                },
                "name": {
                    "description": "Name is the full name of the employee.",
                    "type": "string",
                    "example": "Jane Smith"
                },
                "password": {
                    "description": "Password is the employee's password.",
                    "type": "string",
                    "example": "Pa5"
                },
                "roles": {
                    "description": "Roles contains the roles or permissions of the employee.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "DevOps",
                        "R\u0026D"
                    ]
                }
            }
        },
        "models.EmployeeResponse": {
            "description": "An employee with email, name, birthdate, and roles.",
            "type": "object",
            "properties": {
                "birthdate": {
                    "description": "Birthdate contains the employee's date of birth.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Birthdate"
                        }
                    ]
                },
                "email": {
                    "description": "Email is the unique identifier.",
                    "type": "string",
                    "example": "janesmith@s.afeka.ac.il"
                },
                "manager": {
                    "description": "Manager optionally stores the email of the employee's manager.",
                    "type": "string",
                    "example": "manager@s.example.com"
                },
                "name": {
                    "description": "Name is the full name of the employee.",
                    "type": "string",
                    "example": "Jane Smith"
                },
                "roles": {
                    "description": "Roles contains the roles or permissions of the employee.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "DevOps",
                        "R\u0026D"
                    ]
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is the error message.",
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        },
        "models.ManagerEmailBoundary": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email of the manager.",
                    "type": "string",
                    "example": "manager@s.example.com"
                }
            }
        }
    }
}